import '../auth.sass'

import React, { useState } from 'react'
import { Paper, TextField, Typography, Button/* , Slide  */} from '@material-ui/core'
import VpnKeyIcon from '@material-ui/icons/VpnKey'
import MailOutline from '@material-ui/icons/MailOutline'
import LockOpenIcon from '@material-ui/icons/LockOpen'
import { Link } from 'react-router-dom'
import { connect } from 'react-redux'

import { validateControl } from 'internetShop/selectors'
import ScrollDialog from 'Mui-3/auth/ScrollDialog'
import { auth } from 'internetShop/actions'
// import TransitionSnackbar from 'Mui-3/components/TransitionSnackbar'

const SignIn = ({ auth/* , error, token  */}) => {
  const [formControls, setFormControls] = useState({
    email: {
      type: 'email',
      label: 'Email',
      value: '',
      valid: false,
      touched: false,
      errorMessage: 'Incorrect email.',
      validation: {
        required: true,
        email: true,
      },
    },
    password: {
      type: 'password',
      label: 'Password',
      value: '',
      valid: false,
      touched: false,
      errorMessage: 'At least 6 characters.',
      validation: {
        required: true,
        minLength: 6
      },
    },
  })
  const [open, setOpen] = useState(false)
  // const [openSnack, setOpenSnack] = useState(false)
  // const [transition, setTransition] = useState(undefined)

  const header = (
    <div className="auth__header">
      <Typography variant='h4' color='primary'>
        Sign In
      </Typography>
      <Typography variant='h4' color='secondary'>
        Sign Up
      </Typography>
    </div>
  )

  const handleChange = (e, controlName) => {
    const newFormControls = { ...formControls }
    const control = newFormControls[controlName]

    control.value = e.target.value
    control.touched = true
    control.valid = validateControl(control.value, control.validation)

    setFormControls(newFormControls)
  }

  const renderFormControls = () => {
    return Object.keys(formControls).map((controlName, index) => {
      const control = formControls[controlName]

      let iconField = null
      switch (controlName) {
        case 'email':
          iconField = <MailOutline fontSize='small' />
          break
        case 'password':
          iconField = <VpnKeyIcon fontSize='small' />
          break
        case 'verifyPassword':
          iconField = <LockOpenIcon fontSize='small' />
          break
        default:
          iconField = null
      }

      const isInvalid = !control.valid && control.touched
      const errorMessage = isInvalid
        ? control.errorMessage || 'Incorrect entry'
        : ''

      return (
        <div className='auth__fild' key={index}>
          {iconField}
          <TextField
            id={`${control.label}`}
            type={control.type}
            label={control.label}
            value={control.value}
            error={isInvalid}
            helperText={errorMessage}
            onChange={(e) => handleChange(e, controlName)}
          />
        </div>
      )
    })
  }

  const handleClickAuth = () => auth(
    formControls.email.value,
    formControls.password.value,
    true
  )

  // const handleError = Transition => {
  //   setTransition(() => Transition)
  //   setOpenSnack(true)
  // }

  // const TransitionLeft = props => {
  //   return <Slide {...props} direction='left' />
  // }

  // const handleClickAuth = async () => {
  //     auth(
  //     formControls.email.value,
  //     formControls.password.value,
  //     true
  //   )
    // if (error !== undefined || token !== undefined) {
    //   handleError(TransitionLeft)
    // }
  // }

  const handleClickOpen = () => setOpen(true)
  const handleClose = () => setOpen(false)

  return (
    <div className='auth'>
      <Paper elevation={3} className='auth__sign-in'>

        {header}

        {renderFormControls()}

        <Link to='/recovery' className="auth__forgotPass">
          Fogot Password?
        </Link>

        <Button
          variant='contained'
          color='primary'
          onClick={handleClickAuth}
        >
          Sign In
        </Button>

        <ScrollDialog
          to='sign-in'
          label='Privacy Policy'
          className="auth__policy"
          handleClickOpen={handleClickOpen}
          handleClose={handleClose}
          open={open}
        />

        <Link to='/' className="auth__cancel">
          Cancel
        </Link>

        {/* <TransitionSnackbar
          open={openSnack}
          transition={transition}
        /> */}

      </Paper>
    </div>
  )
}

const mapStateToProps = state => {
  return {
    error: state.internetShop.auth.error
  }
}

const mapDispatchToProps = {
  auth
}

export default connect(mapStateToProps, mapDispatchToProps)(SignIn)