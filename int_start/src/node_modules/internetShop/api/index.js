// import mockPhones from './mockPhones'
import mockPhones from './mockPhones_image_http'
import mockCategories from './mockCategories'

const phonesURL = 'https://int-start-2.firebaseio.com/phones.json'
const categoriesURL = 'https://int-start-2.firebaseio.com/categories.json'

const key = 'AIzaSyCAAnLfFgNV7glTt8QQeeqRIdF_qo9WSVg'
const signUpURL = `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${key}`
const signInURL = `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${key}`

const sendDataToServer = async (url, data) => {
  try {
    const response = await fetch(url, {
      method: 'POST',
      body: JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json'
      }
    })
    const json = await response.json()
    console.log("TCL: data", json)

  } catch (err) {
    console.log("TCL: sendDataToServer -> err", err)
  }
}

export const sendPhonesToServer = async () => {
  return await sendDataToServer(phonesURL, mockPhones)
}

export const sendCategoriesToServer = async () => {
  return await sendDataToServer(categoriesURL, mockCategories)
}

const fetchData = async url => {
  const response = await fetch(url)
  const json = await response.json()
  return Object.values(json)[0]
}

export const fetchPhonesApi = async () => {
  return await fetchData(phonesURL)
}

export const loadMorePhonesApi = async () => {
  return await fetchData(phonesURL)
}

export const fetchPhoneByIdApi = async id => {
  const phones = await fetchData(phonesURL)

  return phones.find(phone => phone.id === id)
}

export const fetchCategoriesApi = async () => {
  return await fetchData(categoriesURL)
}

export const authApi = async (email, password, isLogin) => {
  const authData = {
    email,
    password,
    returnSecureToken: true
  }

  const url = isLogin ? signInURL : signUpURL
  const response = await fetch(url, {
    method: 'POST',
    body: JSON.stringify(authData),
    headers: {
      'Content-Type': 'application/app'
    }
  })

  const data = await response.json()
  const expirationDate = new Date(new Date().getTime() + data.expiresIn * 1000)

  localStorage.setItem('token', data.idToken)
  localStorage.setItem('userId', data.localId)
  localStorage.setItem('expirationDate', expirationDate)

  if (data.error) {
    return data
  }

  return {
    idToken: data.idToken,
    expiresIn: data.expiresIn
  }
}