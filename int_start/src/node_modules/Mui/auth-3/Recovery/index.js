import '../auth.sass'

import React, { useState } from 'react'
import { Paper, TextField, Typography, Button } from '@material-ui/core'
// import VpnKeyIcon from '@material-ui/icons/VpnKey'
import MailOutline from '@material-ui/icons/MailOutline'
// import LockOpenIcon from '@material-ui/icons/LockOpen'
import { Link } from 'react-router-dom'

import { validateControl } from 'internetShop/selectors'

const SignIn = () => {
  const [formControls, setFormControls] = useState({
    email: {
      type: 'email',
      label: 'Email',
      value: '',
      valid: false,
      touched: false,
      errorMessage: 'Incorrect email.',
      validation: {
        required: true,
        email: true,
      },
    },
    // password: {
    //   type: 'password',
    //   label: 'Password',
    //   value: '',
    //   valid: false,
    //   touched: false,
    //   errorMessage: 'At least 6 characters.',
    //   validation: {
    //     required: true,
    //     minLength: 6
    //   },
    // },
  })


  const header = (
    <div className="auth__header">
      <Typography variant='h4' color='primary'>
        Recovery
      </Typography>
    </div>
  )

  const handleChange = (e, controlName) => {
    const newFormControls = { ...formControls }
    const control = newFormControls[controlName]

    control.value = e.target.value
    control.touched = true
    control.valid = validateControl(control.value, control.validation)

    setFormControls(newFormControls)
  }

  const renderFormControls = () => {
    return Object.keys(formControls).map((controlName, index) => {
      const control = formControls[controlName]

      const isInvalid = !control.valid && control.touched
      const errorMessage = isInvalid
        ? control.errorMessage || 'Incorrect entry'
        : ''

      return (
        <div className='auth__fild_recovery' key={index}>
          <MailOutline fontSize='small' />
          <TextField
            id={`${control.label}`}
            type={control.type}
            label={control.label}
            value={control.value}
            error={isInvalid}
            helperText={errorMessage}
            onChange={(e) => handleChange(e, controlName)}
          />
        </div>
      )
    })
  }

  return (
    <div className='auth'>
      <Paper elevation={3} className='auth__sign-in'>

        {header}

        {renderFormControls()}

        <Button variant='contained' color='primary'>
          Recovery
        </Button>

        <Link to='/' className="auth__cancel">
          Cancel
        </Link>

      </Paper>
    </div>
  )
}

export default SignIn