import React, { useState } from 'react'
import TextField from '@material-ui/core/TextField'
import Button from '@material-ui/core/Button'
import { Link } from 'react-router-dom'
// import Paper from '@material-ui/core/Paper'

import { validateControl } from 'internetShop/selectors'
import { Paper } from '@material-ui/core'

const SignUp = () => {
  const [isFormValid, setIsFormValid] = useState(false)
  const [formControls, setFormControls] = useState({
    email: {
      type: 'email',
      label: 'Email',
      value: '',
      valid: true,
      touched: false,
      helperText: '',
      validation: {
        required: true,
        email: true,
      },
    },
    password: {
      type: 'password',
      label: 'Password',
      value: '',
      valid: true,
      touched: false,
      helperText: '',
      validation: {
        required: true,
        minLength: 6,
      },
    },
    verifyPassword: {
      type: 'password',
      label: 'Verify Password',
      value: '',
      valid: true,
      touched: false,
      helperText: '',
      validation: {
        required: true,
        minLength: 6,
        samePassword: true,
      },
    },
  })

  const handleChange = (e, controlName) => {
    const newFormControls = { ...formControls }
    const control = newFormControls[controlName]

    control.value = e.target.value
    control.touched = true
    control.valid = validateControl(e.target.value, control.validation, newFormControls)
    control.helperText = control.valid
      ? ''
      : control.type === 'password'
        ? 'At least 6 characters.'
        : 'Incorrect entry.'

    setFormControls(newFormControls)

    let isFormValid = true
    Object.keys(formControls).forEach(name => {
      isFormValid = formControls[name].valid && isFormValid
    })

    setIsFormValid(isFormValid)
  }

  const renderFields = () => {
    return (
      Object.keys(formControls).map((controlName, index) => {
        const control = formControls[controlName]

        return (
          <TextField
            key={index}
            id={`${control.label}-${index}`}
            type={control.type}
            value={control.value}
            label={control.label}
            helperText={control.helperText}
            error={!control.valid}
            variant='outlined'
            size='small'
            onChange={(e) => handleChange(e, controlName)}
          />
        )
      })
    )
  }

  const handleClick = e => {
    e.preventDefault()

    const newFormControls = { ...formControls }
    Object.keys(newFormControls).map(control => {
      if (isFormValid) newFormControls[control].value = ''
    })
    setFormControls(newFormControls)
  }

  return (
    <div className='auth sign-up'>
      <Paper elevation={20}>
        <form className='auth__form'>
          <div className='auth__form_header'>
            <h3>Sing In</h3>
            <h3 className='highlight'>Sing Up</h3>
          </div>

          {renderFields()}

          <Button
            variant='contained'
            color='primary'
            // disabled={!isFormValid}
            onClick={handleClick}
          >Sign Up</Button>

          <Link to='/sign-up' className='policy'>
            Privacy Policy
          </Link>
        </form>
      </Paper>
    </div>
  )
}

export default SignUp