
export const getActiveCategory = ownProps => ownProps.match.params.id

export const getPhones = (state, ownProps) => {
  const activeCategory = ownProps.match.params.id
  const applySearch = item =>
    item.name.toLowerCase().indexOf(state.phonesPage.search.toLowerCase()) > -1
  const applyCategory = item => item.categoryId === activeCategory

  const phones = state.phonesPage.ids
    .map(id => state.phones[id])
    .filter(applySearch)

  if (activeCategory === undefined) {
    return phones
  }

  return phones.filter(applyCategory)
}

export const getPhoneById = (state, id) => state.phones[id]

export const getRenderedPhonesLength = state => state.phonesPage.ids.length

export const getTotalBasketCount = state => state.basket.length

export const getTotalBasketPrice = state => {
  const applyTotalSum = (total, current) => total + current

  return state.basket
    .map(id => getPhoneById(state, id))
    .map(phone => phone.price)
    .reduce(applyTotalSum, 0)
}

export const getCategories = state =>
  Object.keys(state.categories).map(key => state.categories[key])

export const getPhonesBasketWithCount = state => {
  const uniqueIds = [...new Set(state.basket)]
  const phoneCount = id => state.basket
    .filter(basketId => basketId === id)
    .length

  const phones =  uniqueIds
    .map(id => getPhoneById(state, id))
    .map(phone => ({ ...phone, count: phoneCount(phone.id) }))

  return phones
}